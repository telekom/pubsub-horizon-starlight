# Copyright 2024 Deutsche Telekom IT GmbH
#
# SPDX-License-Identifier: Apache-2.0

spring:
  application:
    name: Horizon Starlight
  data:
    redis:
      url: ${STARLIGHT_REPORTING_REDIS_URL}
  main:
    banner-mode: off
  lifecycle:
    timeout-per-shutdown-phase: ${STARLIGHT_PUBLISHING_TIMEOUT_MS:30000}ms

server:
  shutdown: graceful

logging:
  level:
    root: ${LOG_LEVEL:INFO}

management:
  server:
    port: 8081
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,heapdump,shutdown
  endpoint:
    health:
      show-details: always
    shutdown:
      enabled: true
  health:
    redis:
      enabled: ${STARLIGHT_REPORTING_REDIS_ENABLED:false}
    hazelcast:
      enabled: false

  zipkin:
    tracing:
      endpoint: ${JAEGER_COLLECTOR_URL:http://jaeger.example.com:9411}
  tracing:
    sampling:
      probability: ${ZIPKIN_SAMPLER_PROBABILITY:1.0}

starlight:
  features:
    publisherCheck: ${STARLIGHT_FEATURE_PUBLISHER_CHECK:true}
    schemaValidation: ${STARLIGHT_FEATURE_SCHEMA_VALIDATION:false}
  security:
    # Must be lower-case and comma-separated, can be regex
    headerPropagationBlacklist: ${STARLIGHT_HEADER_PROPAGATION_BLACKLIST:x-spacegate-token,authorization,content-length,host,accept.*,x-forwarded.*,cookie}
    # OAuth-settings with comma-separated issuerUrls
    issuerUrls: ${STARLIGHT_ISSUER_URL:http://localhost:8080/auth/realms/default}
    oauth: true
  defaultEnvironment: ${STARLIGHT_DEFAULT_ENVIRONMENT:integration}
  publishingTopic: ${STARLIGHT_PUBLISHING_TOPIC:published}
  publishingTimeout: ${STARLIGHT_PUBLISHING_TIMEOUT_MS:5000}
  defaultMaxPayloadSize: ${STARLIGHT_DEFAULT_MAX_PAYLOAD_SIZE:1048576}
  payloadCheckExemptionList: ${STARLIGHT_PAYLOAD_CHECK_EXEMPTION_LIST:}
  reporting:
    redis:
      enabled: ${STARLIGHT_REPORTING_REDIS_ENABLED:false}

# only used for schema validation (not yet possible as OSS for starlight)
eniapi:
  baseurl: ${ENIAPI_BASEURL:localhost:8080}
  refreshInterval: ${ENIAPI_REFRESHINTERVAL:30000}

# only used for schema validation (not yet possible as OSS for starlight)
oidc:
  issuerUrl: ${IRIS_ISSUER_URL:https://iris.example.com/auth/realms/default/protocol/openid-connect/token}
  clientId: ${CLIENT_ID:foo}
  clientSecret: ${CLIENT_SECRET:bar}

horizon:
  cache:
    enabled: true
    kubernetesServiceDns: ${STARLIGHT_CACHE_SERVICE_DNS:horizon-quasar-discovery-headless.integration.svc.cluster.local}
  kafka:
    bootstrapServers: ${STARLIGHT_KAFKA_BROKERS:kafka:9092}
    transactionIdPrefix: ${STARLIGHT_KAFKA_TRANSACTION_PREFIX:starlight}
    groupId: ${STARLIGHT_KAFKA_GROUP_ID:starlight}
    lingerMs: ${STARLIGHT_KAFKA_LINGER_MS:5}
    acks: ${STARLIGHT_KAFKA_ACKS:1}
    compression:
      enabled: ${STARLIGHT_KAFKA_COMPRESSION_ENABLED:false}
      type: ${STARLIGHT_KAFKA_COMPRESSION_TYPE:none}

pandora:
  tracing:
    name: horizon
    debugEnabled: false